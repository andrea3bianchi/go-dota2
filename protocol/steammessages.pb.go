// Code generated by protoc-gen-go. DO NOT EDIT.
// source: steammessages.proto

package protocol

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type EGCPlatform int32

const (
	EGCPlatform_k_eGCPlatform_None    EGCPlatform = 0
	EGCPlatform_k_eGCPlatform_PC      EGCPlatform = 1
	EGCPlatform_k_eGCPlatform_Mac     EGCPlatform = 2
	EGCPlatform_k_eGCPlatform_Linux   EGCPlatform = 3
	EGCPlatform_k_eGCPlatform_Android EGCPlatform = 4
	EGCPlatform_k_eGCPlatform_iOS     EGCPlatform = 5
)

var EGCPlatform_name = map[int32]string{
	0: "k_eGCPlatform_None",
	1: "k_eGCPlatform_PC",
	2: "k_eGCPlatform_Mac",
	3: "k_eGCPlatform_Linux",
	4: "k_eGCPlatform_Android",
	5: "k_eGCPlatform_iOS",
}

var EGCPlatform_value = map[string]int32{
	"k_eGCPlatform_None":    0,
	"k_eGCPlatform_PC":      1,
	"k_eGCPlatform_Mac":     2,
	"k_eGCPlatform_Linux":   3,
	"k_eGCPlatform_Android": 4,
	"k_eGCPlatform_iOS":     5,
}

func (x EGCPlatform) Enum() *EGCPlatform {
	p := new(EGCPlatform)
	*p = x
	return p
}

func (x EGCPlatform) String() string {
	return proto.EnumName(EGCPlatform_name, int32(x))
}

func (x *EGCPlatform) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EGCPlatform_value, data, "EGCPlatform")
	if err != nil {
		return err
	}
	*x = EGCPlatform(value)
	return nil
}

func (EGCPlatform) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_662a1850681ae3f8, []int{0}
}

type GCProtoBufMsgSrc int32

const (
	GCProtoBufMsgSrc_GCProtoBufMsgSrc_Unspecified    GCProtoBufMsgSrc = 0
	GCProtoBufMsgSrc_GCProtoBufMsgSrc_FromSystem     GCProtoBufMsgSrc = 1
	GCProtoBufMsgSrc_GCProtoBufMsgSrc_FromSteamID    GCProtoBufMsgSrc = 2
	GCProtoBufMsgSrc_GCProtoBufMsgSrc_FromGC         GCProtoBufMsgSrc = 3
	GCProtoBufMsgSrc_GCProtoBufMsgSrc_ReplySystem    GCProtoBufMsgSrc = 4
	GCProtoBufMsgSrc_GCProtoBufMsgSrc_SpoofedSteamID GCProtoBufMsgSrc = 5
)

var GCProtoBufMsgSrc_name = map[int32]string{
	0: "GCProtoBufMsgSrc_Unspecified",
	1: "GCProtoBufMsgSrc_FromSystem",
	2: "GCProtoBufMsgSrc_FromSteamID",
	3: "GCProtoBufMsgSrc_FromGC",
	4: "GCProtoBufMsgSrc_ReplySystem",
	5: "GCProtoBufMsgSrc_SpoofedSteamID",
}

var GCProtoBufMsgSrc_value = map[string]int32{
	"GCProtoBufMsgSrc_Unspecified":    0,
	"GCProtoBufMsgSrc_FromSystem":     1,
	"GCProtoBufMsgSrc_FromSteamID":    2,
	"GCProtoBufMsgSrc_FromGC":         3,
	"GCProtoBufMsgSrc_ReplySystem":    4,
	"GCProtoBufMsgSrc_SpoofedSteamID": 5,
}

func (x GCProtoBufMsgSrc) Enum() *GCProtoBufMsgSrc {
	p := new(GCProtoBufMsgSrc)
	*p = x
	return p
}

func (x GCProtoBufMsgSrc) String() string {
	return proto.EnumName(GCProtoBufMsgSrc_name, int32(x))
}

func (x *GCProtoBufMsgSrc) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(GCProtoBufMsgSrc_value, data, "GCProtoBufMsgSrc")
	if err != nil {
		return err
	}
	*x = GCProtoBufMsgSrc(value)
	return nil
}

func (GCProtoBufMsgSrc) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_662a1850681ae3f8, []int{1}
}

type CMsgProtoBufHeader struct {
	ClientSteamId        *uint64           `protobuf:"fixed64,1,opt,name=client_steam_id,json=clientSteamId" json:"client_steam_id,omitempty"`
	ClientSessionId      *int32            `protobuf:"varint,2,opt,name=client_session_id,json=clientSessionId" json:"client_session_id,omitempty"`
	SourceAppId          *uint32           `protobuf:"varint,3,opt,name=source_app_id,json=sourceAppId" json:"source_app_id,omitempty"`
	JobIdSource          *uint64           `protobuf:"fixed64,10,opt,name=job_id_source,json=jobIdSource,def=18446744073709551615" json:"job_id_source,omitempty"`
	JobIdTarget          *uint64           `protobuf:"fixed64,11,opt,name=job_id_target,json=jobIdTarget,def=18446744073709551615" json:"job_id_target,omitempty"`
	TargetJobName        *string           `protobuf:"bytes,12,opt,name=target_job_name,json=targetJobName" json:"target_job_name,omitempty"`
	Eresult              *int32            `protobuf:"varint,13,opt,name=eresult,def=2" json:"eresult,omitempty"`
	ErrorMessage         *string           `protobuf:"bytes,14,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	GcMsgSrc             *GCProtoBufMsgSrc `protobuf:"varint,200,opt,name=gc_msg_src,json=gcMsgSrc,enum=protocol.GCProtoBufMsgSrc,def=0" json:"gc_msg_src,omitempty"`
	GcDirIndexSource     *int32            `protobuf:"varint,201,opt,name=gc_dir_index_source,json=gcDirIndexSource,def=-1" json:"gc_dir_index_source,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *CMsgProtoBufHeader) Reset()         { *m = CMsgProtoBufHeader{} }
func (m *CMsgProtoBufHeader) String() string { return proto.CompactTextString(m) }
func (*CMsgProtoBufHeader) ProtoMessage()    {}
func (*CMsgProtoBufHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_662a1850681ae3f8, []int{0}
}

func (m *CMsgProtoBufHeader) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgProtoBufHeader.Unmarshal(m, b)
}
func (m *CMsgProtoBufHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgProtoBufHeader.Marshal(b, m, deterministic)
}
func (m *CMsgProtoBufHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgProtoBufHeader.Merge(m, src)
}
func (m *CMsgProtoBufHeader) XXX_Size() int {
	return xxx_messageInfo_CMsgProtoBufHeader.Size(m)
}
func (m *CMsgProtoBufHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgProtoBufHeader.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgProtoBufHeader proto.InternalMessageInfo

const Default_CMsgProtoBufHeader_JobIdSource uint64 = 18446744073709551615
const Default_CMsgProtoBufHeader_JobIdTarget uint64 = 18446744073709551615
const Default_CMsgProtoBufHeader_Eresult int32 = 2
const Default_CMsgProtoBufHeader_GcMsgSrc GCProtoBufMsgSrc = GCProtoBufMsgSrc_GCProtoBufMsgSrc_Unspecified
const Default_CMsgProtoBufHeader_GcDirIndexSource int32 = -1

func (m *CMsgProtoBufHeader) GetClientSteamId() uint64 {
	if m != nil && m.ClientSteamId != nil {
		return *m.ClientSteamId
	}
	return 0
}

func (m *CMsgProtoBufHeader) GetClientSessionId() int32 {
	if m != nil && m.ClientSessionId != nil {
		return *m.ClientSessionId
	}
	return 0
}

func (m *CMsgProtoBufHeader) GetSourceAppId() uint32 {
	if m != nil && m.SourceAppId != nil {
		return *m.SourceAppId
	}
	return 0
}

func (m *CMsgProtoBufHeader) GetJobIdSource() uint64 {
	if m != nil && m.JobIdSource != nil {
		return *m.JobIdSource
	}
	return Default_CMsgProtoBufHeader_JobIdSource
}

func (m *CMsgProtoBufHeader) GetJobIdTarget() uint64 {
	if m != nil && m.JobIdTarget != nil {
		return *m.JobIdTarget
	}
	return Default_CMsgProtoBufHeader_JobIdTarget
}

func (m *CMsgProtoBufHeader) GetTargetJobName() string {
	if m != nil && m.TargetJobName != nil {
		return *m.TargetJobName
	}
	return ""
}

func (m *CMsgProtoBufHeader) GetEresult() int32 {
	if m != nil && m.Eresult != nil {
		return *m.Eresult
	}
	return Default_CMsgProtoBufHeader_Eresult
}

func (m *CMsgProtoBufHeader) GetErrorMessage() string {
	if m != nil && m.ErrorMessage != nil {
		return *m.ErrorMessage
	}
	return ""
}

func (m *CMsgProtoBufHeader) GetGcMsgSrc() GCProtoBufMsgSrc {
	if m != nil && m.GcMsgSrc != nil {
		return *m.GcMsgSrc
	}
	return Default_CMsgProtoBufHeader_GcMsgSrc
}

func (m *CMsgProtoBufHeader) GetGcDirIndexSource() int32 {
	if m != nil && m.GcDirIndexSource != nil {
		return *m.GcDirIndexSource
	}
	return Default_CMsgProtoBufHeader_GcDirIndexSource
}

type CGCSystemMsg_GetAccountDetails struct {
	Steamid              *uint64  `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	Appid                *uint32  `protobuf:"varint,2,opt,name=appid" json:"appid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CGCSystemMsg_GetAccountDetails) Reset()         { *m = CGCSystemMsg_GetAccountDetails{} }
func (m *CGCSystemMsg_GetAccountDetails) String() string { return proto.CompactTextString(m) }
func (*CGCSystemMsg_GetAccountDetails) ProtoMessage()    {}
func (*CGCSystemMsg_GetAccountDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_662a1850681ae3f8, []int{1}
}

func (m *CGCSystemMsg_GetAccountDetails) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CGCSystemMsg_GetAccountDetails.Unmarshal(m, b)
}
func (m *CGCSystemMsg_GetAccountDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CGCSystemMsg_GetAccountDetails.Marshal(b, m, deterministic)
}
func (m *CGCSystemMsg_GetAccountDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CGCSystemMsg_GetAccountDetails.Merge(m, src)
}
func (m *CGCSystemMsg_GetAccountDetails) XXX_Size() int {
	return xxx_messageInfo_CGCSystemMsg_GetAccountDetails.Size(m)
}
func (m *CGCSystemMsg_GetAccountDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_CGCSystemMsg_GetAccountDetails.DiscardUnknown(m)
}

var xxx_messageInfo_CGCSystemMsg_GetAccountDetails proto.InternalMessageInfo

func (m *CGCSystemMsg_GetAccountDetails) GetSteamid() uint64 {
	if m != nil && m.Steamid != nil {
		return *m.Steamid
	}
	return 0
}

func (m *CGCSystemMsg_GetAccountDetails) GetAppid() uint32 {
	if m != nil && m.Appid != nil {
		return *m.Appid
	}
	return 0
}

type CGCSystemMsg_GetAccountDetails_Response struct {
	EresultDeprecated      *uint32  `protobuf:"varint,1,opt,name=eresult_deprecated,json=eresultDeprecated,def=2" json:"eresult_deprecated,omitempty"`
	AccountName            *string  `protobuf:"bytes,2,opt,name=account_name,json=accountName" json:"account_name,omitempty"`
	PersonaName            *string  `protobuf:"bytes,3,opt,name=persona_name,json=personaName" json:"persona_name,omitempty"`
	IsProfileCreated       *bool    `protobuf:"varint,26,opt,name=is_profile_created,json=isProfileCreated" json:"is_profile_created,omitempty"`
	IsProfilePublic        *bool    `protobuf:"varint,4,opt,name=is_profile_public,json=isProfilePublic" json:"is_profile_public,omitempty"`
	IsInventoryPublic      *bool    `protobuf:"varint,5,opt,name=is_inventory_public,json=isInventoryPublic" json:"is_inventory_public,omitempty"`
	IsVacBanned            *bool    `protobuf:"varint,7,opt,name=is_vac_banned,json=isVacBanned" json:"is_vac_banned,omitempty"`
	IsCyberCafe            *bool    `protobuf:"varint,8,opt,name=is_cyber_cafe,json=isCyberCafe" json:"is_cyber_cafe,omitempty"`
	IsSchoolAccount        *bool    `protobuf:"varint,9,opt,name=is_school_account,json=isSchoolAccount" json:"is_school_account,omitempty"`
	IsLimited              *bool    `protobuf:"varint,10,opt,name=is_limited,json=isLimited" json:"is_limited,omitempty"`
	IsSubscribed           *bool    `protobuf:"varint,11,opt,name=is_subscribed,json=isSubscribed" json:"is_subscribed,omitempty"`
	Package                *uint32  `protobuf:"varint,12,opt,name=package" json:"package,omitempty"`
	IsFreeTrialAccount     *bool    `protobuf:"varint,13,opt,name=is_free_trial_account,json=isFreeTrialAccount" json:"is_free_trial_account,omitempty"`
	FreeTrialExpiration    *uint32  `protobuf:"varint,14,opt,name=free_trial_expiration,json=freeTrialExpiration" json:"free_trial_expiration,omitempty"`
	IsLowViolence          *bool    `protobuf:"varint,15,opt,name=is_low_violence,json=isLowViolence" json:"is_low_violence,omitempty"`
	IsAccountLockedDown    *bool    `protobuf:"varint,16,opt,name=is_account_locked_down,json=isAccountLockedDown" json:"is_account_locked_down,omitempty"`
	IsCommunityBanned      *bool    `protobuf:"varint,17,opt,name=is_community_banned,json=isCommunityBanned" json:"is_community_banned,omitempty"`
	IsTradeBanned          *bool    `protobuf:"varint,18,opt,name=is_trade_banned,json=isTradeBanned" json:"is_trade_banned,omitempty"`
	TradeBanExpiration     *uint32  `protobuf:"varint,19,opt,name=trade_ban_expiration,json=tradeBanExpiration" json:"trade_ban_expiration,omitempty"`
	Accountid              *uint32  `protobuf:"varint,20,opt,name=accountid" json:"accountid,omitempty"`
	SuspensionEndTime      *uint32  `protobuf:"varint,21,opt,name=suspension_end_time,json=suspensionEndTime" json:"suspension_end_time,omitempty"`
	Currency               *string  `protobuf:"bytes,22,opt,name=currency" json:"currency,omitempty"`
	SteamLevel             *uint32  `protobuf:"varint,23,opt,name=steam_level,json=steamLevel" json:"steam_level,omitempty"`
	FriendCount            *uint32  `protobuf:"varint,24,opt,name=friend_count,json=friendCount" json:"friend_count,omitempty"`
	AccountCreationTime    *uint32  `protobuf:"varint,25,opt,name=account_creation_time,json=accountCreationTime" json:"account_creation_time,omitempty"`
	IsSteamguardEnabled    *bool    `protobuf:"varint,27,opt,name=is_steamguard_enabled,json=isSteamguardEnabled" json:"is_steamguard_enabled,omitempty"`
	IsPhoneVerified        *bool    `protobuf:"varint,28,opt,name=is_phone_verified,json=isPhoneVerified" json:"is_phone_verified,omitempty"`
	IsTwoFactorAuthEnabled *bool    `protobuf:"varint,29,opt,name=is_two_factor_auth_enabled,json=isTwoFactorAuthEnabled" json:"is_two_factor_auth_enabled,omitempty"`
	TwoFactorEnabledTime   *uint32  `protobuf:"varint,30,opt,name=two_factor_enabled_time,json=twoFactorEnabledTime" json:"two_factor_enabled_time,omitempty"`
	PhoneVerificationTime  *uint32  `protobuf:"varint,31,opt,name=phone_verification_time,json=phoneVerificationTime" json:"phone_verification_time,omitempty"`
	PhoneId                *uint64  `protobuf:"varint,33,opt,name=phone_id,json=phoneId" json:"phone_id,omitempty"`
	IsPhoneIdentifying     *bool    `protobuf:"varint,34,opt,name=is_phone_identifying,json=isPhoneIdentifying" json:"is_phone_identifying,omitempty"`
	RtIdentityLinked       *uint32  `protobuf:"varint,35,opt,name=rt_identity_linked,json=rtIdentityLinked" json:"rt_identity_linked,omitempty"`
	RtBirthDate            *uint32  `protobuf:"varint,36,opt,name=rt_birth_date,json=rtBirthDate" json:"rt_birth_date,omitempty"`
	TxnCountryCode         *string  `protobuf:"bytes,37,opt,name=txn_country_code,json=txnCountryCode" json:"txn_country_code,omitempty"`
	HasAcceptedChinaSsa    *bool    `protobuf:"varint,38,opt,name=has_accepted_china_ssa,json=hasAcceptedChinaSsa" json:"has_accepted_china_ssa,omitempty"`
	IsBannedSteamChina     *bool    `protobuf:"varint,39,opt,name=is_banned_steam_china,json=isBannedSteamChina" json:"is_banned_steam_china,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *CGCSystemMsg_GetAccountDetails_Response) Reset() {
	*m = CGCSystemMsg_GetAccountDetails_Response{}
}
func (m *CGCSystemMsg_GetAccountDetails_Response) String() string { return proto.CompactTextString(m) }
func (*CGCSystemMsg_GetAccountDetails_Response) ProtoMessage()    {}
func (*CGCSystemMsg_GetAccountDetails_Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_662a1850681ae3f8, []int{2}
}

func (m *CGCSystemMsg_GetAccountDetails_Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CGCSystemMsg_GetAccountDetails_Response.Unmarshal(m, b)
}
func (m *CGCSystemMsg_GetAccountDetails_Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CGCSystemMsg_GetAccountDetails_Response.Marshal(b, m, deterministic)
}
func (m *CGCSystemMsg_GetAccountDetails_Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CGCSystemMsg_GetAccountDetails_Response.Merge(m, src)
}
func (m *CGCSystemMsg_GetAccountDetails_Response) XXX_Size() int {
	return xxx_messageInfo_CGCSystemMsg_GetAccountDetails_Response.Size(m)
}
func (m *CGCSystemMsg_GetAccountDetails_Response) XXX_DiscardUnknown() {
	xxx_messageInfo_CGCSystemMsg_GetAccountDetails_Response.DiscardUnknown(m)
}

var xxx_messageInfo_CGCSystemMsg_GetAccountDetails_Response proto.InternalMessageInfo

const Default_CGCSystemMsg_GetAccountDetails_Response_EresultDeprecated uint32 = 2

func (m *CGCSystemMsg_GetAccountDetails_Response) GetEresultDeprecated() uint32 {
	if m != nil && m.EresultDeprecated != nil {
		return *m.EresultDeprecated
	}
	return Default_CGCSystemMsg_GetAccountDetails_Response_EresultDeprecated
}

func (m *CGCSystemMsg_GetAccountDetails_Response) GetAccountName() string {
	if m != nil && m.AccountName != nil {
		return *m.AccountName
	}
	return ""
}

func (m *CGCSystemMsg_GetAccountDetails_Response) GetPersonaName() string {
	if m != nil && m.PersonaName != nil {
		return *m.PersonaName
	}
	return ""
}

func (m *CGCSystemMsg_GetAccountDetails_Response) GetIsProfileCreated() bool {
	if m != nil && m.IsProfileCreated != nil {
		return *m.IsProfileCreated
	}
	return false
}

func (m *CGCSystemMsg_GetAccountDetails_Response) GetIsProfilePublic() bool {
	if m != nil && m.IsProfilePublic != nil {
		return *m.IsProfilePublic
	}
	return false
}

func (m *CGCSystemMsg_GetAccountDetails_Response) GetIsInventoryPublic() bool {
	if m != nil && m.IsInventoryPublic != nil {
		return *m.IsInventoryPublic
	}
	return false
}

func (m *CGCSystemMsg_GetAccountDetails_Response) GetIsVacBanned() bool {
	if m != nil && m.IsVacBanned != nil {
		return *m.IsVacBanned
	}
	return false
}

func (m *CGCSystemMsg_GetAccountDetails_Response) GetIsCyberCafe() bool {
	if m != nil && m.IsCyberCafe != nil {
		return *m.IsCyberCafe
	}
	return false
}

func (m *CGCSystemMsg_GetAccountDetails_Response) GetIsSchoolAccount() bool {
	if m != nil && m.IsSchoolAccount != nil {
		return *m.IsSchoolAccount
	}
	return false
}

func (m *CGCSystemMsg_GetAccountDetails_Response) GetIsLimited() bool {
	if m != nil && m.IsLimited != nil {
		return *m.IsLimited
	}
	return false
}

func (m *CGCSystemMsg_GetAccountDetails_Response) GetIsSubscribed() bool {
	if m != nil && m.IsSubscribed != nil {
		return *m.IsSubscribed
	}
	return false
}

func (m *CGCSystemMsg_GetAccountDetails_Response) GetPackage() uint32 {
	if m != nil && m.Package != nil {
		return *m.Package
	}
	return 0
}

func (m *CGCSystemMsg_GetAccountDetails_Response) GetIsFreeTrialAccount() bool {
	if m != nil && m.IsFreeTrialAccount != nil {
		return *m.IsFreeTrialAccount
	}
	return false
}

func (m *CGCSystemMsg_GetAccountDetails_Response) GetFreeTrialExpiration() uint32 {
	if m != nil && m.FreeTrialExpiration != nil {
		return *m.FreeTrialExpiration
	}
	return 0
}

func (m *CGCSystemMsg_GetAccountDetails_Response) GetIsLowViolence() bool {
	if m != nil && m.IsLowViolence != nil {
		return *m.IsLowViolence
	}
	return false
}

func (m *CGCSystemMsg_GetAccountDetails_Response) GetIsAccountLockedDown() bool {
	if m != nil && m.IsAccountLockedDown != nil {
		return *m.IsAccountLockedDown
	}
	return false
}

func (m *CGCSystemMsg_GetAccountDetails_Response) GetIsCommunityBanned() bool {
	if m != nil && m.IsCommunityBanned != nil {
		return *m.IsCommunityBanned
	}
	return false
}

func (m *CGCSystemMsg_GetAccountDetails_Response) GetIsTradeBanned() bool {
	if m != nil && m.IsTradeBanned != nil {
		return *m.IsTradeBanned
	}
	return false
}

func (m *CGCSystemMsg_GetAccountDetails_Response) GetTradeBanExpiration() uint32 {
	if m != nil && m.TradeBanExpiration != nil {
		return *m.TradeBanExpiration
	}
	return 0
}

func (m *CGCSystemMsg_GetAccountDetails_Response) GetAccountid() uint32 {
	if m != nil && m.Accountid != nil {
		return *m.Accountid
	}
	return 0
}

func (m *CGCSystemMsg_GetAccountDetails_Response) GetSuspensionEndTime() uint32 {
	if m != nil && m.SuspensionEndTime != nil {
		return *m.SuspensionEndTime
	}
	return 0
}

func (m *CGCSystemMsg_GetAccountDetails_Response) GetCurrency() string {
	if m != nil && m.Currency != nil {
		return *m.Currency
	}
	return ""
}

func (m *CGCSystemMsg_GetAccountDetails_Response) GetSteamLevel() uint32 {
	if m != nil && m.SteamLevel != nil {
		return *m.SteamLevel
	}
	return 0
}

func (m *CGCSystemMsg_GetAccountDetails_Response) GetFriendCount() uint32 {
	if m != nil && m.FriendCount != nil {
		return *m.FriendCount
	}
	return 0
}

func (m *CGCSystemMsg_GetAccountDetails_Response) GetAccountCreationTime() uint32 {
	if m != nil && m.AccountCreationTime != nil {
		return *m.AccountCreationTime
	}
	return 0
}

func (m *CGCSystemMsg_GetAccountDetails_Response) GetIsSteamguardEnabled() bool {
	if m != nil && m.IsSteamguardEnabled != nil {
		return *m.IsSteamguardEnabled
	}
	return false
}

func (m *CGCSystemMsg_GetAccountDetails_Response) GetIsPhoneVerified() bool {
	if m != nil && m.IsPhoneVerified != nil {
		return *m.IsPhoneVerified
	}
	return false
}

func (m *CGCSystemMsg_GetAccountDetails_Response) GetIsTwoFactorAuthEnabled() bool {
	if m != nil && m.IsTwoFactorAuthEnabled != nil {
		return *m.IsTwoFactorAuthEnabled
	}
	return false
}

func (m *CGCSystemMsg_GetAccountDetails_Response) GetTwoFactorEnabledTime() uint32 {
	if m != nil && m.TwoFactorEnabledTime != nil {
		return *m.TwoFactorEnabledTime
	}
	return 0
}

func (m *CGCSystemMsg_GetAccountDetails_Response) GetPhoneVerificationTime() uint32 {
	if m != nil && m.PhoneVerificationTime != nil {
		return *m.PhoneVerificationTime
	}
	return 0
}

func (m *CGCSystemMsg_GetAccountDetails_Response) GetPhoneId() uint64 {
	if m != nil && m.PhoneId != nil {
		return *m.PhoneId
	}
	return 0
}

func (m *CGCSystemMsg_GetAccountDetails_Response) GetIsPhoneIdentifying() bool {
	if m != nil && m.IsPhoneIdentifying != nil {
		return *m.IsPhoneIdentifying
	}
	return false
}

func (m *CGCSystemMsg_GetAccountDetails_Response) GetRtIdentityLinked() uint32 {
	if m != nil && m.RtIdentityLinked != nil {
		return *m.RtIdentityLinked
	}
	return 0
}

func (m *CGCSystemMsg_GetAccountDetails_Response) GetRtBirthDate() uint32 {
	if m != nil && m.RtBirthDate != nil {
		return *m.RtBirthDate
	}
	return 0
}

func (m *CGCSystemMsg_GetAccountDetails_Response) GetTxnCountryCode() string {
	if m != nil && m.TxnCountryCode != nil {
		return *m.TxnCountryCode
	}
	return ""
}

func (m *CGCSystemMsg_GetAccountDetails_Response) GetHasAcceptedChinaSsa() bool {
	if m != nil && m.HasAcceptedChinaSsa != nil {
		return *m.HasAcceptedChinaSsa
	}
	return false
}

func (m *CGCSystemMsg_GetAccountDetails_Response) GetIsBannedSteamChina() bool {
	if m != nil && m.IsBannedSteamChina != nil {
		return *m.IsBannedSteamChina
	}
	return false
}

type CIPLocationInfo struct {
	Ip                   *uint32  `protobuf:"varint,1,opt,name=ip" json:"ip,omitempty"`
	Latitude             *float32 `protobuf:"fixed32,2,opt,name=latitude" json:"latitude,omitempty"`
	Longitude            *float32 `protobuf:"fixed32,3,opt,name=longitude" json:"longitude,omitempty"`
	Country              *string  `protobuf:"bytes,4,opt,name=country" json:"country,omitempty"`
	State                *string  `protobuf:"bytes,5,opt,name=state" json:"state,omitempty"`
	City                 *string  `protobuf:"bytes,6,opt,name=city" json:"city,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CIPLocationInfo) Reset()         { *m = CIPLocationInfo{} }
func (m *CIPLocationInfo) String() string { return proto.CompactTextString(m) }
func (*CIPLocationInfo) ProtoMessage()    {}
func (*CIPLocationInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_662a1850681ae3f8, []int{3}
}

func (m *CIPLocationInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CIPLocationInfo.Unmarshal(m, b)
}
func (m *CIPLocationInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CIPLocationInfo.Marshal(b, m, deterministic)
}
func (m *CIPLocationInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CIPLocationInfo.Merge(m, src)
}
func (m *CIPLocationInfo) XXX_Size() int {
	return xxx_messageInfo_CIPLocationInfo.Size(m)
}
func (m *CIPLocationInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CIPLocationInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CIPLocationInfo proto.InternalMessageInfo

func (m *CIPLocationInfo) GetIp() uint32 {
	if m != nil && m.Ip != nil {
		return *m.Ip
	}
	return 0
}

func (m *CIPLocationInfo) GetLatitude() float32 {
	if m != nil && m.Latitude != nil {
		return *m.Latitude
	}
	return 0
}

func (m *CIPLocationInfo) GetLongitude() float32 {
	if m != nil && m.Longitude != nil {
		return *m.Longitude
	}
	return 0
}

func (m *CIPLocationInfo) GetCountry() string {
	if m != nil && m.Country != nil {
		return *m.Country
	}
	return ""
}

func (m *CIPLocationInfo) GetState() string {
	if m != nil && m.State != nil {
		return *m.State
	}
	return ""
}

func (m *CIPLocationInfo) GetCity() string {
	if m != nil && m.City != nil {
		return *m.City
	}
	return ""
}

type CGCMsgGetIPLocationResponse struct {
	Infos                []*CIPLocationInfo `protobuf:"bytes,1,rep,name=infos" json:"infos,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *CGCMsgGetIPLocationResponse) Reset()         { *m = CGCMsgGetIPLocationResponse{} }
func (m *CGCMsgGetIPLocationResponse) String() string { return proto.CompactTextString(m) }
func (*CGCMsgGetIPLocationResponse) ProtoMessage()    {}
func (*CGCMsgGetIPLocationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_662a1850681ae3f8, []int{4}
}

func (m *CGCMsgGetIPLocationResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CGCMsgGetIPLocationResponse.Unmarshal(m, b)
}
func (m *CGCMsgGetIPLocationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CGCMsgGetIPLocationResponse.Marshal(b, m, deterministic)
}
func (m *CGCMsgGetIPLocationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CGCMsgGetIPLocationResponse.Merge(m, src)
}
func (m *CGCMsgGetIPLocationResponse) XXX_Size() int {
	return xxx_messageInfo_CGCMsgGetIPLocationResponse.Size(m)
}
func (m *CGCMsgGetIPLocationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CGCMsgGetIPLocationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CGCMsgGetIPLocationResponse proto.InternalMessageInfo

func (m *CGCMsgGetIPLocationResponse) GetInfos() []*CIPLocationInfo {
	if m != nil {
		return m.Infos
	}
	return nil
}

var E_KeyField = &proto.ExtensionDesc{
	ExtendedType:  (*descriptorpb.FieldOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         60000,
	Name:          "protocol.key_field",
	Tag:           "varint,60000,opt,name=key_field,def=0",
	Filename:      "steammessages.proto",
}

var E_MsgpoolSoftLimit = &proto.ExtensionDesc{
	ExtendedType:  (*descriptorpb.MessageOptions)(nil),
	ExtensionType: (*int32)(nil),
	Field:         60000,
	Name:          "protocol.msgpool_soft_limit",
	Tag:           "varint,60000,opt,name=msgpool_soft_limit,def=32",
	Filename:      "steammessages.proto",
}

var E_MsgpoolHardLimit = &proto.ExtensionDesc{
	ExtendedType:  (*descriptorpb.MessageOptions)(nil),
	ExtensionType: (*int32)(nil),
	Field:         60001,
	Name:          "protocol.msgpool_hard_limit",
	Tag:           "varint,60001,opt,name=msgpool_hard_limit,def=384",
	Filename:      "steammessages.proto",
}

func init() {
	proto.RegisterEnum("protocol.EGCPlatform", EGCPlatform_name, EGCPlatform_value)
	proto.RegisterEnum("protocol.GCProtoBufMsgSrc", GCProtoBufMsgSrc_name, GCProtoBufMsgSrc_value)
	proto.RegisterType((*CMsgProtoBufHeader)(nil), "protocol.CMsgProtoBufHeader")
	proto.RegisterType((*CGCSystemMsg_GetAccountDetails)(nil), "protocol.CGCSystemMsg_GetAccountDetails")
	proto.RegisterType((*CGCSystemMsg_GetAccountDetails_Response)(nil), "protocol.CGCSystemMsg_GetAccountDetails_Response")
	proto.RegisterType((*CIPLocationInfo)(nil), "protocol.CIPLocationInfo")
	proto.RegisterType((*CGCMsgGetIPLocationResponse)(nil), "protocol.CGCMsgGetIPLocationResponse")
	proto.RegisterExtension(E_KeyField)
	proto.RegisterExtension(E_MsgpoolSoftLimit)
	proto.RegisterExtension(E_MsgpoolHardLimit)
}

func init() {
	proto.RegisterFile("steammessages.proto", fileDescriptor_662a1850681ae3f8)
}

var fileDescriptor_662a1850681ae3f8 = []byte{
	// 1588 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x56, 0xcd, 0x72, 0x1b, 0xb9,
	0x11, 0x5e, 0x52, 0xe2, 0x9a, 0x82, 0x44, 0x7b, 0x04, 0x49, 0xf6, 0x58, 0xb2, 0x56, 0xb4, 0x9c,
	0xec, 0xaa, 0x5c, 0x89, 0x6c, 0xc9, 0xf2, 0x4f, 0x78, 0xb3, 0x47, 0xb6, 0x96, 0x29, 0xc9, 0xab,
	0x1a, 0x2a, 0xce, 0x25, 0x55, 0x28, 0x70, 0xd0, 0x43, 0x62, 0x35, 0x04, 0xa6, 0x00, 0x50, 0x12,
	0x6f, 0xae, 0xca, 0x25, 0x2f, 0x91, 0xca, 0x6d, 0x9f, 0x25, 0xb9, 0xe7, 0x96, 0x4b, 0xf2, 0x10,
	0xb9, 0xa7, 0xf0, 0x33, 0xa4, 0x64, 0xbb, 0x36, 0x7b, 0x22, 0xf1, 0x7d, 0x5f, 0x37, 0xba, 0xd1,
	0xdd, 0x18, 0xa0, 0x15, 0x6d, 0x80, 0x8e, 0x46, 0xa0, 0x35, 0x1d, 0x80, 0xde, 0x2d, 0x95, 0x34,
	0x12, 0x37, 0xdd, 0x4f, 0x26, 0x8b, 0xf5, 0xf6, 0x40, 0xca, 0x41, 0x01, 0x4f, 0x1c, 0xd0, 0x1f,
	0xe7, 0x4f, 0x18, 0xe8, 0x4c, 0xf1, 0xd2, 0x48, 0xe5, 0xb5, 0xdb, 0x7f, 0x9e, 0x47, 0x38, 0x39,
	0xd1, 0x83, 0x53, 0xbb, 0x7a, 0x33, 0xce, 0xbf, 0x07, 0xca, 0x40, 0xe1, 0x6f, 0xd1, 0x9d, 0xac,
	0xe0, 0x20, 0x0c, 0x71, 0x1b, 0x10, 0xce, 0xe2, 0x5a, 0xbb, 0xb6, 0xf3, 0x75, 0xda, 0xf2, 0x70,
	0xcf, 0xa2, 0x5d, 0x86, 0x1f, 0xa3, 0xe5, 0x4a, 0x07, 0x5a, 0x73, 0x29, 0xac, 0xb2, 0xde, 0xae,
	0xed, 0x34, 0xd2, 0xe0, 0xa0, 0xe7, 0xf1, 0x2e, 0xc3, 0xdb, 0xa8, 0xa5, 0xe5, 0x58, 0x65, 0x40,
	0x68, 0x59, 0x5a, 0xdd, 0x5c, 0xbb, 0xb6, 0xd3, 0x4a, 0x17, 0x3d, 0xf8, 0xba, 0x2c, 0xbb, 0x0c,
	0xbf, 0x42, 0xad, 0x1f, 0x65, 0x9f, 0x70, 0x46, 0x3c, 0x1a, 0x23, 0xbb, 0x6b, 0x67, 0x75, 0xef,
	0xd5, 0xc1, 0xc1, 0x8b, 0x97, 0x07, 0x07, 0x4f, 0x5f, 0x3e, 0x7b, 0xf9, 0xf4, 0x77, 0xcf, 0x9f,
	0xef, 0xbd, 0xd8, 0x7b, 0x9e, 0x2e, 0xfe, 0x28, 0xfb, 0x5d, 0xd6, 0x73, 0xc2, 0x6b, 0x96, 0x86,
	0xaa, 0x01, 0x98, 0x78, 0xf1, 0xff, 0x5a, 0x9e, 0x39, 0xa1, 0xcd, 0xd5, 0x9b, 0x10, 0xeb, 0x40,
	0xd0, 0x11, 0xc4, 0x4b, 0xed, 0xda, 0xce, 0x42, 0xda, 0xf2, 0xf0, 0xef, 0x65, 0xff, 0x3d, 0x1d,
	0x01, 0xde, 0x40, 0xb7, 0x40, 0x81, 0x1e, 0x17, 0x26, 0x6e, 0xd9, 0x0c, 0x3b, 0xb5, 0xfd, 0xb4,
	0x42, 0xf0, 0x23, 0xd4, 0x02, 0xa5, 0xa4, 0x22, 0xa1, 0x16, 0xf1, 0x6d, 0xe7, 0x62, 0xc9, 0x81,
	0x27, 0x1e, 0xc3, 0x7f, 0x44, 0x68, 0x90, 0x91, 0x91, 0x1e, 0x10, 0xad, 0xb2, 0xf8, 0xef, 0xf6,
	0x44, 0x6f, 0xef, 0xaf, 0xef, 0x56, 0xe5, 0xda, 0x3d, 0x4a, 0xaa, 0x32, 0x9c, 0xe8, 0x41, 0x4f,
	0x65, 0x9d, 0x07, 0x9f, 0x22, 0xe4, 0x0f, 0x42, 0x97, 0x90, 0xf1, 0x9c, 0x03, 0x4b, 0x9b, 0x83,
	0xcc, 0xa3, 0x78, 0x1f, 0xad, 0x0c, 0x32, 0xc2, 0xb8, 0x22, 0x5c, 0x30, 0xb8, 0xaa, 0x0e, 0xef,
	0x1f, 0x35, 0x17, 0x67, 0xfd, 0xb7, 0x7b, 0x69, 0x34, 0xc8, 0x0e, 0xb9, 0xea, 0x5a, 0xd6, 0x1f,
	0x58, 0x07, 0x7d, 0xfc, 0x69, 0xf3, 0x63, 0xfd, 0x2f, 0x3f, 0x6d, 0x7e, 0x6c, 0x6e, 0xff, 0x09,
	0x7d, 0x93, 0x1c, 0x25, 0xbd, 0x89, 0x36, 0x30, 0x3a, 0xd1, 0x03, 0x72, 0x04, 0xe6, 0x75, 0x96,
	0xc9, 0xb1, 0x30, 0x87, 0x60, 0x28, 0x2f, 0x34, 0x8e, 0xd1, 0x2d, 0xd7, 0x09, 0xd3, 0x46, 0xa8,
	0x96, 0x78, 0x15, 0x35, 0x68, 0x59, 0x86, 0xb2, 0xb7, 0x52, 0xbf, 0xf0, 0xde, 0x6b, 0xd6, 0xfb,
	0xfc, 0xf6, 0x7f, 0x97, 0xd0, 0x77, 0x3f, 0xef, 0x9e, 0xa4, 0xa0, 0x4b, 0x29, 0x34, 0xe0, 0xa7,
	0x08, 0x87, 0x23, 0x25, 0x0c, 0x4a, 0x05, 0x19, 0x35, 0xe0, 0xb7, 0x6c, 0xd9, 0xf3, 0x5e, 0x0e,
	0xe4, 0xe1, 0x94, 0xc3, 0x0f, 0xd1, 0x12, 0xf5, 0xce, 0x7c, 0xed, 0xea, 0xee, 0xe0, 0x17, 0x03,
	0xe6, 0x2a, 0xf7, 0x10, 0x2d, 0x95, 0xa0, 0xb4, 0x14, 0xd4, 0x4b, 0xe6, 0xbc, 0x24, 0x60, 0x4e,
	0xf2, 0x1b, 0x84, 0xb9, 0x26, 0xa5, 0x92, 0x39, 0x2f, 0x80, 0x64, 0x0a, 0xdc, 0xbe, 0xeb, 0xed,
	0xda, 0x4e, 0x33, 0x8d, 0xb8, 0x3e, 0xf5, 0x44, 0xe2, 0x71, 0xdb, 0xf6, 0xd7, 0xd4, 0xe5, 0xb8,
	0x5f, 0xf0, 0x2c, 0x9e, 0x77, 0xe2, 0x3b, 0x53, 0xf1, 0xa9, 0x83, 0xf1, 0x2e, 0x5a, 0xe1, 0x9a,
	0x70, 0x71, 0x01, 0xc2, 0x48, 0x35, 0xa9, 0xd4, 0x0d, 0xa7, 0x5e, 0xe6, 0xba, 0x5b, 0x31, 0x41,
	0xbf, 0x8d, 0x5a, 0x5c, 0x93, 0x0b, 0x9a, 0x91, 0x3e, 0x15, 0x02, 0x58, 0x7c, 0xcb, 0x29, 0x17,
	0xb9, 0xfe, 0x40, 0xb3, 0x37, 0x0e, 0x0a, 0x9a, 0x6c, 0xd2, 0x07, 0x45, 0x32, 0x9a, 0x43, 0xdc,
	0xac, 0x34, 0x89, 0xc5, 0x12, 0x9a, 0x43, 0x88, 0x51, 0x67, 0x43, 0x29, 0x0b, 0x12, 0x4e, 0x23,
	0x5e, 0xa8, 0x62, 0xec, 0x39, 0x3c, 0x54, 0x01, 0x6f, 0x22, 0xc4, 0x35, 0x29, 0xf8, 0x88, 0xdb,
	0xac, 0x91, 0x13, 0x2d, 0x70, 0x7d, 0xec, 0x01, 0xdb, 0xdc, 0xd6, 0xd5, 0xb8, 0x6f, 0x2f, 0x8f,
	0x3e, 0x30, 0x37, 0x5b, 0xcd, 0x74, 0x89, 0xeb, 0xde, 0x14, 0xb3, 0x1d, 0x52, 0xd2, 0xec, 0xdc,
	0xf6, 0xfe, 0x92, 0xeb, 0x84, 0x6a, 0x89, 0xf7, 0xd0, 0x1a, 0xd7, 0x24, 0x57, 0x00, 0xc4, 0x28,
	0x4e, 0x67, 0xd1, 0xb4, 0x9c, 0x1b, 0xcc, 0xf5, 0x3b, 0x05, 0x70, 0x66, 0xa9, 0x2a, 0xa0, 0x7d,
	0xb4, 0x76, 0x4d, 0x0f, 0x57, 0x25, 0x57, 0xd4, 0x70, 0x29, 0xdc, 0x58, 0xb5, 0xd2, 0x95, 0xbc,
	0x32, 0x78, 0x3b, 0xa5, 0xec, 0x1c, 0xdb, 0x24, 0xe4, 0x25, 0xb9, 0xe0, 0xb2, 0x00, 0x91, 0x41,
	0x7c, 0xc7, 0x6d, 0xd0, 0xe2, 0xfa, 0x58, 0x5e, 0x7e, 0x08, 0x20, 0x7e, 0x86, 0xee, 0x72, 0x5d,
	0xc5, 0x40, 0x0a, 0x99, 0x9d, 0x03, 0x23, 0x4c, 0x5e, 0x8a, 0x38, 0x72, 0xf2, 0x15, 0xae, 0x43,
	0x18, 0xc7, 0x8e, 0x3b, 0x94, 0x97, 0x22, 0x54, 0x31, 0x93, 0xa3, 0xd1, 0x58, 0x70, 0x33, 0xa9,
	0x6a, 0xb3, 0x5c, 0x55, 0x31, 0xa9, 0x98, 0x50, 0x21, 0x1f, 0x8c, 0x51, 0x94, 0x41, 0xa5, 0xc5,
	0x55, 0x30, 0x67, 0x16, 0x0d, 0xba, 0xa7, 0x68, 0x75, 0x2a, 0xba, 0x9e, 0xe7, 0x8a, 0xcb, 0x13,
	0x9b, 0x20, 0xbd, 0x96, 0xe6, 0x03, 0xb4, 0x10, 0x62, 0xe7, 0x2c, 0x5e, 0x75, 0xb2, 0x19, 0x60,
	0xe3, 0xd4, 0x63, 0x5d, 0x82, 0x70, 0x97, 0x31, 0x08, 0x46, 0x0c, 0x1f, 0x41, 0xbc, 0xe6, 0x74,
	0xcb, 0x33, 0xea, 0xad, 0x60, 0x67, 0x7c, 0x04, 0x78, 0x1d, 0x35, 0xb3, 0xb1, 0x52, 0x20, 0xb2,
	0x49, 0x7c, 0xd7, 0x8d, 0xc5, 0x74, 0x8d, 0xb7, 0xd0, 0xa2, 0xbf, 0xfd, 0x0b, 0xb8, 0x80, 0x22,
	0xbe, 0xe7, 0x7c, 0x20, 0x07, 0x1d, 0x5b, 0xc4, 0xce, 0x55, 0xae, 0xb8, 0xdd, 0xc4, 0xd7, 0x33,
	0xf6, 0x17, 0xba, 0xc7, 0x92, 0xaa, 0x90, 0xd5, 0x49, 0xbb, 0xa1, 0xb2, 0x51, 0xb9, 0x88, 0xee,
	0xfb, 0x42, 0x06, 0x32, 0x09, 0x9c, 0x8b, 0x69, 0xdf, 0xf5, 0x8b, 0xdb, 0x67, 0x30, 0xa6, 0x8a,
	0x11, 0x10, 0xb4, 0x5f, 0x00, 0x8b, 0x37, 0xaa, 0xfa, 0xf4, 0xa6, 0xdc, 0x5b, 0x4f, 0x55, 0x13,
	0x39, 0x94, 0x02, 0xc8, 0x05, 0x28, 0x77, 0x41, 0xc6, 0x0f, 0xa6, 0x13, 0x69, 0xf1, 0x0f, 0x01,
	0xc6, 0x1d, 0xb4, 0x6e, 0x6b, 0x73, 0x29, 0x49, 0x4e, 0x33, 0x23, 0x15, 0xa1, 0x63, 0x33, 0x9c,
	0x6e, 0xb2, 0xe9, 0x8c, 0xee, 0x72, 0x7d, 0x76, 0x29, 0xdf, 0x39, 0xfe, 0xf5, 0xd8, 0x0c, 0xab,
	0x7d, 0x9e, 0xa3, 0x7b, 0xd7, 0x0c, 0x83, 0x8d, 0xcf, 0xe8, 0x1b, 0x97, 0xd1, 0xaa, 0xa9, 0xcc,
	0x82, 0x89, 0x4b, 0xe9, 0x05, 0xba, 0x77, 0x3d, 0xb6, 0xec, 0xda, 0x41, 0x6c, 0x39, 0xb3, 0xb5,
	0x72, 0x16, 0x62, 0x36, 0x3b, 0x8a, 0xfb, 0xa8, 0xe9, 0xed, 0x38, 0x8b, 0x1f, 0xb6, 0x6b, 0x3b,
	0xf3, 0xe9, 0x2d, 0xb7, 0xee, 0xba, 0xce, 0x99, 0x66, 0xcc, 0x19, 0x08, 0xc3, 0xf3, 0x09, 0x17,
	0x83, 0x78, 0xbb, 0x1a, 0xaa, 0x53, 0x2f, 0x9c, 0x32, 0xf6, 0x8e, 0x53, 0x26, 0x68, 0xcd, 0x84,
	0x14, 0x5c, 0x9c, 0x03, 0x8b, 0x1f, 0xb9, 0xfd, 0x23, 0x65, 0xba, 0x81, 0x38, 0x76, 0xb8, 0xbd,
	0x63, 0x94, 0x21, 0x7d, 0xae, 0xcc, 0x90, 0x30, 0x6a, 0x20, 0xfe, 0x95, 0xaf, 0xae, 0x32, 0x6f,
	0x2c, 0x76, 0x48, 0x0d, 0xe0, 0x1d, 0x14, 0x99, 0x2b, 0xe1, 0xab, 0xaf, 0x26, 0x24, 0x93, 0x0c,
	0xe2, 0x5f, 0xbb, 0x2e, 0xba, 0x6d, 0xae, 0x44, 0xe2, 0xe1, 0x44, 0x32, 0x37, 0x74, 0x43, 0xea,
	0xa6, 0x0e, 0x4a, 0x03, 0x8c, 0x64, 0x43, 0x2e, 0x28, 0xd1, 0x9a, 0xc6, 0xdf, 0xfa, 0xa2, 0x0e,
	0xa9, 0x9d, 0x3a, 0x47, 0x26, 0x96, 0xeb, 0x69, 0x1a, 0x2e, 0x0e, 0x3f, 0x3e, 0xe1, 0x21, 0xe2,
	0xec, 0xe2, 0xef, 0xaa, 0x1c, 0xfd, 0x14, 0xb9, 0x76, 0x70, 0x56, 0x37, 0xbe, 0x3b, 0x7f, 0xab,
	0xa1, 0x3b, 0x49, 0xf7, 0xf4, 0x58, 0xfa, 0x03, 0xed, 0x8a, 0x5c, 0xe2, 0xdb, 0xa8, 0xce, 0x4b,
	0xff, 0x3d, 0x49, 0xeb, 0xbc, 0xb4, 0xfd, 0x5f, 0x50, 0xc3, 0xcd, 0x98, 0xf9, 0x2f, 0x47, 0x3d,
	0x9d, 0xae, 0xed, 0xa4, 0x15, 0x52, 0x0c, 0x3c, 0x39, 0xe7, 0xc8, 0x19, 0x60, 0xef, 0xbb, 0x90,
	0xb7, 0xbb, 0xf9, 0x17, 0xd2, 0x6a, 0x69, 0xbf, 0x88, 0xda, 0xd8, 0x13, 0x6b, 0x38, 0xdc, 0x2f,
	0x30, 0x46, 0xf3, 0x19, 0x37, 0x93, 0xf8, 0x6b, 0x07, 0xba, 0xff, 0xdb, 0xef, 0xd1, 0x46, 0x72,
	0x64, 0x9f, 0x5f, 0x47, 0x60, 0x66, 0x81, 0x4e, 0x3f, 0x86, 0x4f, 0x50, 0x83, 0x8b, 0x5c, 0xea,
	0xb8, 0xd6, 0x9e, 0xdb, 0x59, 0xdc, 0xbf, 0x3f, 0x7b, 0x29, 0x7c, 0x92, 0x56, 0xea, 0x75, 0x8f,
	0xff, 0x5a, 0x43, 0x8b, 0x6f, 0x8f, 0x92, 0xd3, 0x82, 0x9a, 0x5c, 0xaa, 0x11, 0xbe, 0x8b, 0xf0,
	0x39, 0x81, 0x19, 0x40, 0xde, 0x4b, 0x01, 0xd1, 0x57, 0x78, 0x15, 0x45, 0x37, 0xf1, 0xd3, 0x24,
	0xaa, 0xe1, 0x35, 0xb4, 0x7c, 0x13, 0x3d, 0xa1, 0x59, 0x54, 0xc7, 0xf7, 0xd0, 0xca, 0x4d, 0xf8,
	0x98, 0x8b, 0xf1, 0x55, 0x34, 0x87, 0xef, 0xa3, 0xb5, 0x9b, 0xc4, 0x6b, 0xc1, 0x94, 0xe4, 0x2c,
	0x9a, 0xff, 0xdc, 0x15, 0xff, 0xa1, 0x17, 0x35, 0x1e, 0xff, 0xab, 0x86, 0xa2, 0x4f, 0x9f, 0x34,
	0xb8, 0x8d, 0x7e, 0xf6, 0x99, 0x13, 0x7d, 0x85, 0xb7, 0xd0, 0xc6, 0x67, 0x8a, 0x77, 0x4a, 0x8e,
	0xfc, 0x8b, 0x22, 0xaa, 0x7d, 0xd1, 0x85, 0x13, 0xb8, 0x67, 0xea, 0x61, 0x54, 0xc7, 0x1b, 0xe8,
	0xde, 0x17, 0x15, 0x47, 0x49, 0x34, 0xf7, 0x45, 0xf3, 0x14, 0xca, 0x62, 0x12, 0x36, 0x98, 0xc7,
	0x8f, 0xd0, 0xd6, 0x67, 0x8a, 0x5e, 0x29, 0x65, 0x1e, 0x9a, 0xaf, 0x7b, 0x18, 0x35, 0x3a, 0x09,
	0x5a, 0x38, 0x87, 0x09, 0xc9, 0x39, 0x14, 0x0c, 0x6f, 0xee, 0xfa, 0xb7, 0xf7, 0x6e, 0xf5, 0xf6,
	0xde, 0x7d, 0x67, 0xf1, 0x1f, 0x4a, 0x5b, 0x33, 0x1d, 0xff, 0xfb, 0x9f, 0xb6, 0xa1, 0x9a, 0x9d,
	0x46, 0x4e, 0x0b, 0x0d, 0x69, 0xf3, 0x1c, 0x26, 0x8e, 0xef, 0xf4, 0x10, 0x1e, 0xe9, 0x41, 0x69,
	0x3f, 0xda, 0x5a, 0xe6, 0xc6, 0x7f, 0x94, 0xf1, 0xd6, 0x67, 0xde, 0xc2, 0x9b, 0xf2, 0xa6, 0xbf,
	0x46, 0xa7, 0xfe, 0x6c, 0x3f, 0x8d, 0x82, 0x83, 0x9e, 0xcc, 0x8d, 0xfb, 0x84, 0x77, 0xce, 0x66,
	0x4e, 0x87, 0xf6, 0x42, 0xfd, 0x85, 0x4e, 0xff, 0x13, 0x9c, 0xce, 0x3d, 0x7b, 0x75, 0x30, 0xf5,
	0xfa, 0x3d, 0x55, 0xcc, 0x79, 0xfd, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x2c, 0x03, 0xb7, 0xfb,
	0x7d, 0x0c, 0x00, 0x00,
}
